const cctalkCmd = require('./command')
const cmd = new cctalkCmd(8);
var device = require('./device');
var EventEmitter = require('events');
var compose = require('./compose');

function CoinDetector(bus, config) {
  EventEmitter.call(this);
  device.apply(this, arguments);

  this.poll = this.poll.bind(this);
  this.ready = false;
  this.commands = {
    requestStatus: 248,
    requestVariableSet: 247,
    requestManufacturerId: 246,
    requestEquipmentCategoryId: 245,
    requestProductCode: 244,
    requestDatabaseVersion: 243,
    requestSerialNumber: 242,
    requestSoftwareRevision: 241,
    testSolenoids: 240,
    testOutputLines: 238,
    readInputLines: 237,
    readOptoStates: 236,
    latchOutputLines: 233,
    performSelfCheck: 232,
    modifyInhibitStatus: 231,
    requestInhibitStatus: 230,
    readBufferedCredit: 229,
    modifyMasterInhibit: 228,
    requestMasterInhibitStatus: 227,
    requestInsertionCounter: 226,
    requestAcceptCounter: 225,
    modifySorterOverrideStatus: 222,
    requestSorterOverrideStatus: 221,
    requestDataStorageAvailability: 216,
    requestOptionFlags: 213,
    requestCoinPosition: 212,
    modifySorterPath: 210,
    requestSorterPath: 209,
    teachModeControl: 202,
    requestTeachStatus: 201,
    requestCreationDate: 196,
    requestLastModificationDate: 195,
    requestRejectCounter: 194,
    requestFraudCounter: 193,
    requestBuildCode: 192,
    modifyCoinId: 185,
    requestCoinId: 184,
    uploadWindowData: 183,
    downloadCalibrationInfo: 182,
    requestThermistorReading: 173,
    requestBaseYear: 170,
    requestAddressMode:169,
    requestCommsRevision: 4,
    clearCommsStatusVariables: 3,
    requestCommsStatusVariables: 2,
    resetDevice: 1
  };

  this.eventCodes = {
    254: 'return',
    20: 'string',
    19: 'slow',
    13: 'busy',
    8: 'following',
    2: 'inhibited',
    1: 'rejected',
    0: 'accepted',
    accepted: 0,
    rejected: 1,
    inhibited: 2,
    following: 8,
    busy: 13,
    slow: 19,
    string: 20,
    'return': 254
  };
  // register last, after all device type specific variables have been set up!
  this.bus.registerDevice(this);
}

CoinDetector.prototype = new compose(device, EventEmitter)();

CoinDetector.prototype.onBusReady = function onBusReady() {
  this.sendCommand(new cmd(this.config.src, this.config.dest, 254, new Uint8Array(0)))
    .then(() => {
      this.ready = true;
      this.pollInterval = setInterval(this.poll, 200);
      this.emit('ready');
    },
    function(error)
    {
      this.emit('error', error);
    }.bind(this));

};

CoinDetector.prototype.onBusClosed = () => this.ready = false;

CoinDetector.prototype.poll = () => {
  this.sendCommand(new cmd(0, 0, CoinDetector.commands.readBufferedCredit, new Uint8Array(0)))
  .then((reply) => {
    if(this.eventBuffer && reply.data[0] != this.eventBuffer[0]) {
      var dEventCounter = reply.data[0] -  this.eventBuffer[0];
      if(dEventCounter > 5) {
        this.emit('error', new Error('Event overflow. Events generated by the coin detector were lost!'));
      }
      var maxI = Math.min(reply.data.length, dEventCounter*2+1);

      for(var i = 1; i < maxI; i += 2) {
        var type = reply.data[i+1];

        switch(type) {
          case CoinDetector.eventCodes.accepted:
            var coin = reply.data[i];
            this.emit(CoinDetector.eventCodes[type], coin);
            break;
          case CoinDetector.eventCodes.inhibited:
          case CoinDetector.eventCodes.rejected:
            this.emit(CoinDetector.eventCodes[type]);
            break;
          case CoinDetector.eventCodes.return:
            this.emit('return');
            break;
          default:
            this.emit('malfunction', [type, reply.data[i]]);
            this.emit('error', new Error('The device reported a malfunction: Code ' + type + ', ' + reply.data[i]));
        }
      }
      //console.log(reply.data);
    }
    this.eventBuffer = reply.data;
  });
};

CoinDetector.prototype.errorHandler = (e) => {
  this.emit('error', e);
  throw e;
};

CoinDetector.prototype.setAcceptanceMask = function setAcceptanceMask(acceptanceMask) {
  return this.sendCommand(new cmd(0,0,CoinDetector.commands.modifyInhibitStatus,Uint8Array.from([ acceptanceMask & 0xFF, (acceptanceMask >> 8) & 0xFF ])))
    .catch(this.errorHandler);
};

CoinDetector.prototype.enableAcceptance = function enableAcceptance() {
  return this.sendCommand(new cmd(0, 0, CoinDetector.commands.modifyMasterInhibit, new Uint8Array(1).fill(0xFF)))
    .catch(this.errorHandler);
};

CoinDetector.prototype.disableAcceptance = function disableAcceptance() {
  return this.sendCommand(new cmd(0, 0, CoinDetector.commands.modifyMasterInhibit, new Uint8Array(1).fill(0x00)))
    .catch(this.errorHandler);
};

CoinDetector.prototype.getCoinName = function getCoinName(channel) {
  return this.sendCommand(new cmd(0,0,CoinDetector.commands.requestCoinId,Uint8Array.from([ channel ])))
   .then((reply) => String.fromCharCode.apply(null, reply.data));
};

CoinDetector.prototype.getCoinPosition = function getCoinPosition(channel) {
  return this.sendCommand(new cmd(0,0,CoinDetector.commands.requestCoinPosition,Uint8Array.from([ channel ])));
};

module.exports = exports = CoinDetector;
